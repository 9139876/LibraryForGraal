drop schema if exists %schema_name% cascade|

create schema %schema_name%|

create table %schema_name%.quotes_parser_expressions(
    id int4 NOT NULL GENERATED ALWAYS AS IDENTITY
    ,specification text NULL
    ,CONSTRAINT quotes_parser_expressions_pkey PRIMARY KEY (id)
)|

insert into %schema_name%.quotes_parser_expressions(specification) values (null)|

create table %schema_name%.tickersinfoes(
    id int4 NOT NULL GENERATED ALWAYS AS IDENTITY
    ,ticker_title text NOT NULL
    ,market_title text NOT NULL
    ,currency text NULL
    ,volume_code text NULL
    ,auto_update bool NOT NULL DEFAULT false
    ,CONSTRAINT tickersinfoes_pkey PRIMARY KEY (id)
    ,CONSTRAINT tickersinfoes_un UNIQUE (ticker_title, market_title)
)|

create table %schema_name%.tickertfs(
    id int4 NOT NULL GENERATED ALWAYS AS IDENTITY
    ,tickerinfo_id int4 NOT NULL
    ,"period" int4 NOT NULL
    ,trading_time_rules text NOT NULL
    ,get_url text null
    ,parser_id int4 NOT NULL
    ,CONSTRAINT tickertfs_pkey PRIMARY KEY (id)
    ,CONSTRAINT tickertfs_un UNIQUE (period, tickerinfo_id)
    ,CONSTRAINT tickertfs_info_fk FOREIGN KEY (tickerinfo_id) REFERENCES %schema_name%.tickersinfoes(id) ON UPDATE CASCADE ON DELETE CASCADE
    ,CONSTRAINT tickertfs_parser_fk FOREIGN KEY (parser_id) REFERENCES %schema_name%.quotes_parser_expressions(id) ON UPDATE CASCADE ON DELETE CASCADE
)|

create table %schema_name%.quotes(
    id int4 NOT NULL GENERATED ALWAYS AS IDENTITY
    ,tickertf_id int4 NOT NULL
    ,datetime timestamp NOT NULL
    ,"open" numeric(16,8) NOT NULL
    ,high numeric(16,8) NOT NULL
    ,low numeric(16,8) NOT NULL
    ,"close" numeric(16,8) NOT NULL
    ,volume numeric(16,3) NOT NULL
    ,CONSTRAINT quotes_un UNIQUE (tickertf_id, datetime)
    ,CONSTRAINT quotes_fk FOREIGN KEY (tickertf_id) REFERENCES %schema_name%.tickertfs(id) ON UPDATE CASCADE ON DELETE CASCADE
) partition by list(tickertf_id)|

create table %schema_name%.tendentions(
    id int4 NOT NULL GENERATED ALWAYS AS IDENTITY
    ,tickertf_id int4 NOT NULL
    ,"type" int4 NOT NULL
    ,date_of_change timestamp NOT NULL
    ,CONSTRAINT tendentions_pkey PRIMARY KEY (id)
    ,CONSTRAINT tendentions_un UNIQUE (tickertf_id, type)
    ,CONSTRAINT tendentions_fk FOREIGN KEY (tickertf_id) REFERENCES %schema_name%.tickertfs(id) ON UPDATE CASCADE ON DELETE CASCADE
)|

create table %schema_name%.simplepatterns(
    id int4 NOT NULL GENERATED ALWAYS AS IDENTITY
    ,"type" int4 NOT NULL
    ,length int4 NOT NULL
    ,serialize text NOT NULL
    ,tendention_id int4 NOT NULL
    ,CONSTRAINT simplepatterns_pkey PRIMARY KEY (id)
    ,CONSTRAINT simplepatterns_un UNIQUE (type, length, serialize, tendention_id)
    ,CONSTRAINT simplepatterns_fk FOREIGN KEY (tendention_id) REFERENCES %schema_name%.tendentions(id) ON UPDATE CASCADE ON DELETE CASCADE
)|

create table %schema_name%.tfs(
    value int4 NOT NULL
    ,description text NOT NULL
    ,CONSTRAINT tfs_pkey PRIMARY KEY (value)
)|

-- Создание секций под котировки
create or replace function %schema_name%.trig_ttf_add() returns trigger as $$
begin
    execute concat('create table %schema_name%.quotes_part_', new.id, ' partition of %schema_name%.quotes (CONSTRAINT quotes_part_', new.id, '_pkey PRIMARY KEY (datetime)) for values in ( ', new.id, ' )');
    return new;
end;
$$ language plpgsql|

create trigger ttf_add
after insert on %schema_name%.tickertfs for each row execute
procedure trig_ttf_add()|

create or replace function %schema_name%.trig_ttf_remove() returns trigger as $$
begin
    execute concat('drop table if exists %schema_name%.quotes_part_', old.id);
    return old;
end;
$$ language plpgsql|

create trigger ttf_remove
after delete on %schema_name%.tickertfs for each row execute
procedure trig_ttf_remove()|


-- Создание ttf при создании ti

create or replace function %schema_name%.trig_ti_add() returns trigger as $$
declare
    tf int4;
begin
    for tf in select value from %schema_name%.tfs
    loop
        execute concat('insert into %schema_name%.tickertfs(tickerinfo_id, period, trading_time_rules, get_url, parser_id) values(', new.id, ', ', tf, ', null, null, 1)');
    end loop;
    
    return new;
end;
$$ language plpgsql|

create trigger ti_add
after insert on %schema_name%.tickersinfoes for each row execute
procedure trig_ti_add()|


create or replace function %schema_name%.trig_ti_remove() returns trigger as $$
declare
    tf int4;
begin
    for tf in select value from %schema_name%.tfs
    loop
        execute concat('delete from %schema_name%.tickertfs where tickerinfo_id=', old.id, ' and period=', tf);
    end loop;
    
    return old;
end;
$$ language plpgsql|

create trigger ti_remove
after delete on %schema_name%.tickersinfoes for each row execute
procedure trig_ti_remove()|